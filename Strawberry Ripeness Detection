import cv2
import numpy as np

# Open the default webcam (usually device 0)
cap = cv2.VideoCapture(0)

# Check if the webcam is opened correctly
if not cap.isOpened():
    print("Error: Could not open webcam.")
else:
    print("Webcam is opened successfully.")

# Function to detect strawberries based on color and shape
def detect_strawberry(frame):
    # Convert the image to the HSV color space
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Define a more precise lower and upper boundary for the red color in HSV space
    lower_red = np.array([0, 150, 100])  # Lower limit for detecting strawberry red
    upper_red = np.array([10, 255, 255])  # Upper limit for detecting strawberry red

    # Create a mask for red areas
    mask = cv2.inRange(hsv, lower_red, upper_red)

    # Apply morphological operations to reduce noise in the mask
    kernel = np.ones((5, 5), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)

    # Find contours in the mask
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # Loop over all contours
    for contour in contours:
        area = cv2.contourArea(contour)

        # Filter based on size (ignore too small/too large areas)
        if 1000 < area < 10000:  # Adjust based on the expected size of strawberries
            # Get the bounding rectangle around the contour
            x, y, w, h = cv2.boundingRect(contour)

            # Further shape filtering: Check the aspect ratio (strawberries are not too elongated)
            aspect_ratio = w / float(h)
            if 0.75 < aspect_ratio < 1.3:  # This helps avoid very narrow or wide objects
                # Draw a green rectangle around the detected strawberry
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                # Label the rectangle as 'Strawberry'
                cv2.putText(frame, "Strawberry", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

    return frame

# Loop to continuously get frames
while True:
    # Capture frame-by-frame
    ret, frame = cap.read()
    
    if not ret:
        print("Failed to grab frame.")
        break

    # Detect strawberries and draw bounding boxes in the frame
    frame_with_strawberry = detect_strawberry(frame)

    # Display the full video feed with boxes around detected strawberries
    cv2.imshow('Webcam - Strawberry Detection', frame_with_strawberry)

    # Press 'q' to quit the webcam window
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()
